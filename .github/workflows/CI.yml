name: CI
env:
  DEBUG: napi:*
  APP_NAME: ejaan-rs
  MACOSX_DEPLOYMENT_TARGET: '10.15'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - master
    tags:
      - v*
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-15
            target: x86_64-apple-darwin
            build: yarn build --target x86_64-apple-darwin
          - host: macos-15
            target: aarch64-apple-darwin
            build: yarn build --target aarch64-apple-darwin
          - host: windows-2025
            build: yarn build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: windows-2025
            build: yarn build --target aarch64-pc-windows-msvc
            target: aarch64-pc-windows-msvc
          - host: windows-2025
            build: yarn build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.13.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          cache: yarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@20
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-15
            target: x86_64-apple-darwin
            arch: x64
          - host: macos-15
            target: aarch64-apple-darwin
            arch: arm64
          - host: windows-2025
            target: x86_64-pc-windows-msvc
            arch: x64
          # Ignore testing in arm64 windows for now, because it's broken.
          # - host: windows-2025
          #   target: aarch64-pc-windows-msvc
          #   arch: arm64
          - host: windows-2025
            target: i686-pc-windows-msvc
            arch: x86
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          architecture: ${{ matrix.settings.arch }}
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: artifacts
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: artifacts
      - name: Combine binaries
        run: yarn universal
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.repository_owner == 'noaione'
    needs:
      - test-macOS-windows-binding
      - universal-macOS
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Duplicate artifacts
        run: |
          mkdir -p ./artifacts-cloned
          cp -r ./artifacts/* ./artifacts-cloned/
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create changelog
        id: prepare-change
        run: |
          python3 tools/create_changelog.py
          # Fetch git tag contents subject
          VERSION_SUBJ=$(git tag -l --format='%(contents:subject)' ${{ github.ref }})
          echo "version_subject=$VERSION_SUBJ" >> "$GITHUB_OUTPUT"
        env:
          VERSION: ${{ github.ref }}
      - name: Create release
        uses: softprops/action-gh-release@67b6c38432c171b8aa64dc6f3f152d12da2d99fa
        with:
          files: |
            artifacts-cloned/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: CHANGELOG-GENERATED.md
          name: ${{ steps.prepare-change.outputs.version_subject }}
